generate_action_vectors = function(num_actions = 100, seed = 42) {
dp_lsvi$generate_action_vectors(as.integer(num_actions), as.integer(seed))
},
delta_indicator = function(s, a) {
dp_lsvi$delta_indicator(as.integer(s), as.integer(a))
},
phi_func = function(s, a) {
dp_lsvi$phi_func(as.integer(s), as.integer(a))
},
mu_h = function(s, alpha_h) {
dp_lsvi$mu_h(as.integer(s), as.integer(alpha_h))
},
transition_prob = function(s, a, h, alpha_h = 0) {
dp_lsvi$transition_prob(as.integer(s), as.integer(a), as.integer(h), as.integer(alpha_h))
},
reward_func = function(s, a) {
dp_lsvi$reward_func(as.integer(s), as.integer(a))
},
gauss_sym_matrix = function(d, scale) {
dp_lsvi$gauss_sym_matrix(as.integer(d), as.numeric(scale))
},
norm_phi_Lambda_inv = function(phi_vec, Lambda_mat) {
dp_lsvi$norm_phi_Lambda_inv(phi_vec, Lambda_mat)
},
Q_value = function(phi_vec, w_vec, Lambda_mat) {
dp_lsvi$Q_value(phi_vec, w_vec, Lambda_mat)
},
get_action = function(s, w_list, Lambda_list) {
dp_lsvi$get_action(as.integer(s), w_list, Lambda_list)
},
get_value = function(s, w_list, Lambda_list) {
dp_lsvi$get_value(as.integer(s), w_list, Lambda_list)
},
proj_0_H = function(x) {
dp_lsvi$proj_0_H(as.numeric(x))
},
get_epsilon = function() {
dp_lsvi$get_epsilon()
},
run = function() {
dp_lsvi$run()
},
compute_rewards = function() {
dp_lsvi$compute_rewards()
}
)
# Return the wrapper object
return(wrapper)
}
dp_lsvi <- create_DP_LSVI_Luyo()
library(reticulate)
library(here)
# Define a function to source the Python file dynamically
source_dp_lsvi_luyo <- function() {
# Dynamically construct the file path to the Python file
python_file <- here("inst/python/DP_LSVI_Luyo.py")  # Relative path from project root
if (python_file == "") {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
# Source the Python file
reticulate::source_python(python_file)
}
# Define the R wrapper function for DP_LSVI_Luyo
create_DP_LSVI_Luyo <- function() {
# Source the Python script
source_dp_lsvi_luyo()
# Create an instance of the DP_LSVI_Luyo class
dp_lsvi <- DP_LSVI_Luyo$new()
# Define a list of R wrapper functions for interacting with the Python class
wrapper <- list(
get_model_name = function() {
dp_lsvi$get_model_name()
},
get_H = function() {
dp_lsvi$get_H()
},
generate_action_vectors = function(num_actions = 100, seed = 42) {
dp_lsvi$generate_action_vectors(as.integer(num_actions), as.integer(seed))
},
delta_indicator = function(s, a) {
dp_lsvi$delta_indicator(as.integer(s), as.integer(a))
},
phi_func = function(s, a) {
dp_lsvi$phi_func(as.integer(s), as.integer(a))
},
mu_h = function(s, alpha_h) {
dp_lsvi$mu_h(as.integer(s), as.integer(alpha_h))
},
transition_prob = function(s, a, h, alpha_h = 0) {
dp_lsvi$transition_prob(as.integer(s), as.integer(a), as.integer(h), as.integer(alpha_h))
},
reward_func = function(s, a) {
dp_lsvi$reward_func(as.integer(s), as.integer(a))
},
gauss_sym_matrix = function(d, scale) {
dp_lsvi$gauss_sym_matrix(as.integer(d), as.numeric(scale))
},
norm_phi_Lambda_inv = function(phi_vec, Lambda_mat) {
dp_lsvi$norm_phi_Lambda_inv(phi_vec, Lambda_mat)
},
Q_value = function(phi_vec, w_vec, Lambda_mat) {
dp_lsvi$Q_value(phi_vec, w_vec, Lambda_mat)
},
get_action = function(s, w_list, Lambda_list) {
dp_lsvi$get_action(as.integer(s), w_list, Lambda_list)
},
get_value = function(s, w_list, Lambda_list) {
dp_lsvi$get_value(as.integer(s), w_list, Lambda_list)
},
proj_0_H = function(x) {
dp_lsvi$proj_0_H(as.numeric(x))
},
get_epsilon = function() {
dp_lsvi$get_epsilon()
},
run = function() {
dp_lsvi$run()
},
compute_rewards = function() {
dp_lsvi$compute_rewards()
}
)
# Return the wrapper object
return(wrapper)
}
dp_lsvi <- create_DP_LSVI_Luyo()
library(reticulate)
library(here)
# Define a function to source the Python file dynamically
source_dp_lsvi_luyo <- function() {
# Dynamically construct the file path to the Python file
python_file <- here("inst/python/DP_LSVI_Luyo.py")  # Relative path from project root
if (python_file == "") {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
# Source the Python file
reticulate::py_install("numpy", envname = NULL)
reticulate::source_python(python_file)
}
# Define the R wrapper function for DP_LSVI_Luyo
create_DP_LSVI_Luyo <- function() {
# Source the Python script
source_dp_lsvi_luyo()
# Create an instance of the DP_LSVI_Luyo class
dp_lsvi <- DP_LSVI_Luyo$new()
# Define a list of R wrapper functions for interacting with the Python class
wrapper <- list(
get_model_name = function() {
dp_lsvi$get_model_name()
},
get_H = function() {
dp_lsvi$get_H()
},
generate_action_vectors = function(num_actions = 100, seed = 42) {
dp_lsvi$generate_action_vectors(as.integer(num_actions), as.integer(seed))
},
delta_indicator = function(s, a) {
dp_lsvi$delta_indicator(as.integer(s), as.integer(a))
},
phi_func = function(s, a) {
dp_lsvi$phi_func(as.integer(s), as.integer(a))
},
mu_h = function(s, alpha_h) {
dp_lsvi$mu_h(as.integer(s), as.integer(alpha_h))
},
transition_prob = function(s, a, h, alpha_h = 0) {
dp_lsvi$transition_prob(as.integer(s), as.integer(a), as.integer(h), as.integer(alpha_h))
},
reward_func = function(s, a) {
dp_lsvi$reward_func(as.integer(s), as.integer(a))
},
gauss_sym_matrix = function(d, scale) {
dp_lsvi$gauss_sym_matrix(as.integer(d), as.numeric(scale))
},
norm_phi_Lambda_inv = function(phi_vec, Lambda_mat) {
dp_lsvi$norm_phi_Lambda_inv(phi_vec, Lambda_mat)
},
Q_value = function(phi_vec, w_vec, Lambda_mat) {
dp_lsvi$Q_value(phi_vec, w_vec, Lambda_mat)
},
get_action = function(s, w_list, Lambda_list) {
dp_lsvi$get_action(as.integer(s), w_list, Lambda_list)
},
get_value = function(s, w_list, Lambda_list) {
dp_lsvi$get_value(as.integer(s), w_list, Lambda_list)
},
proj_0_H = function(x) {
dp_lsvi$proj_0_H(as.numeric(x))
},
get_epsilon = function() {
dp_lsvi$get_epsilon()
},
run = function() {
dp_lsvi$run()
},
compute_rewards = function() {
dp_lsvi$compute_rewards()
}
)
# Return the wrapper object
return(wrapper)
}
dp_lsvi <- create_DP_LSVI_Luyo()
library(reticulate)
library(here)
dp_lsvi <- create_DP_LSVI_Luyo()
library(reticulate)
library(here)
library(reticulate)
library(here)
# Use the correct virtual environment
reticulate::use_virtualenv("~/.virtualenvs/r-reticulate", required = TRUE)
library(reticulate)
library(here)
# Use the correct virtual environment
reticulate::use_virtualenv("~/.virtualenvs/r-reticulate", required = TRUE)
library(reticulate)
library(here)
# Function to set up the Python environment dynamically
setup_python_environment <- function(envname = "r-reticulate") {
# Check if the virtual environment exists
if (!file.exists(virtualenv_root(envname))) {
# Create a virtual environment if it doesn't exist
reticulate::virtualenv_create(envname)
}
# Install necessary Python packages if not already installed
reticulate::virtualenv_install(envname, packages = c("numpy"), ignore_installed = TRUE)
# Use the virtual environment
reticulate::use_virtualenv(envname, required = TRUE)
}
# Function to source the Python file
source_dp_lsvi_luyo <- function() {
# Call the setup function to ensure the Python environment is ready
setup_python_environment()
# Dynamically construct the file path to the Python file
python_file <- here::here("inst/python/DP_LSVI_Luyo.py")  # Relative path from project root
if (!file.exists(python_file)) {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
# Source the Python file
reticulate::source_python(python_file)
}
# Wrapper to interact with the Python class
create_DP_LSVI_Luyo <- function() {
# Source the Python script
source_dp_lsvi_luyo()
# Create an instance of the DP_LSVI_Luyo class
dp_lsvi <- DP_LSVI_Luyo$new()
# Define a list of R wrapper functions for interacting with the Python class
wrapper <- list(
get_model_name = function() {
dp_lsvi$get_model_name()
},
get_H = function() {
dp_lsvi$get_H()
},
run = function() {
dp_lsvi$run()
},
compute_rewards = function() {
dp_lsvi$compute_rewards()
}
# Add other methods as needed...
)
# Return the wrapper object
return(wrapper)
}
dp_lsvi <- create_DP_LSVI_Luyo()
model_name <- dp_lsvi$get_model_name()
library(reticulate)
library(here)
# Function to set up the Python environment dynamically
setup_python_environment <- function(envname = "r-reticulate") {
# Check if the virtual environment exists
if (!file.exists(virtualenv_root(envname))) {
# Create a virtual environment if it doesn't exist
reticulate::virtualenv_create(envname)
}
# Install necessary Python packages if not already installed
reticulate::virtualenv_install(envname, packages = c("numpy"), ignore_installed = TRUE)
# Use the virtual environment
reticulate::use_virtualenv(envname, required = TRUE)
}
# Function to source the Python file
source_dp_lsvi_luyo <- function() {
# Call the setup function to ensure the Python environment is ready
setup_python_environment()
# Dynamically construct the file path to the Python file
python_file <- here::here("inst/python/DP_LSVI_Luyo.py")  # Relative path from project root
if (!file.exists(python_file)) {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
# Source the Python file
reticulate::source_python(python_file)
}
# Wrapper to interact with the Python class
create_DP_LSVI_Luyo <- function() {
# Source the Python script
source_dp_lsvi_luyo()
# Create an instance of the DP_LSVI_Luyo class
dp_lsvi <- DP_LSVI_Luyo$new()
# Define a list of R wrapper functions for interacting with the Python class
wrapper <- list(
get_model_name = function() {
dp_lsvi$get_model_name()
},
get_H = function() {
dp_lsvi$get_H()
},
run = function() {
dp_lsvi$run()
},
compute_rewards = function() {
dp_lsvi$compute_rewards()
}
# Add other methods as needed...
)
# Return the wrapper object
return(wrapper)
}
dp_lsvi <- create_DP_LSVI_Luyo()
library(reticulate)
library(here)
# Function to set up the Python environment dynamically
setup_python_environment <- function(envname = "r-reticulate") {
# Use reticulate's default virtual environment location
env_path <- virtualenv_root() # Get the base path for virtual environments
env_full_path <- file.path(env_path, envname) # Path to the specific environment
# Check if the virtual environment exists
if (!dir.exists(env_full_path)) {
# Create a virtual environment if it doesn't exist
message("Creating virtual environment: ", envname)
reticulate::virtualenv_create(envname)
}
# Install necessary Python packages if not already installed
reticulate::virtualenv_install(envname, packages = c("numpy"), ignore_installed = TRUE)
# Use the virtual environment
reticulate::use_virtualenv(envname, required = TRUE)
}
# Function to source the Python file
source_dp_lsvi_luyo <- function() {
# Call the setup function to ensure the Python environment is ready
setup_python_environment()
# Dynamically construct the file path to the Python file
python_file <- here::here("inst/python/DP_LSVI_Luyo.py")  # Relative path from project root
if (!file.exists(python_file)) {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
# Source the Python file
reticulate::source_python(python_file)
}
# Wrapper to interact with the Python class
create_DP_LSVI_Luyo <- function() {
# Source the Python script
source_dp_lsvi_luyo()
# Create an instance of the DP_LSVI_Luyo class
dp_lsvi <- DP_LSVI_Luyo$new()
# Define a list of R wrapper functions for interacting with the Python class
wrapper <- list(
get_model_name = function() {
dp_lsvi$get_model_name()
},
get_H = function() {
dp_lsvi$get_H()
},
run = function() {
dp_lsvi$run()
},
compute_rewards = function() {
dp_lsvi$compute_rewards()
}
# Add other methods as needed...
)
# Return the wrapper object
return(wrapper)
}
tryCatch({
dp_lsvi <- create_DP_LSVI_Luyo()
# Access the model name
model_name <- dp_lsvi$get_model_name()
print(model_name)
# Run the algorithm
dp_lsvi$run()
# Compute rewards
rewards <- dp_lsvi$compute_rewards()
print(rewards)
}, error = function(e) {
message("Error encountered: ", e$message)
})
library(reticulate)
library(here)
# Set up the Python environment
setup_python_environment <- function(envname = "r-reticulate") {
# Check if the virtual environment exists
if (!reticulate::virtualenv_exists(envname)) {
# Create the virtual environment if it doesn't exist
message("Creating virtual environment: ", envname)
reticulate::virtualenv_create(envname)
}
# Install necessary Python packages
reticulate::virtualenv_install(envname, packages = c("numpy"), ignore_installed = TRUE)
# Use the virtual environment
reticulate::use_virtualenv(envname, required = TRUE)
}
# Source the Python file
source_dp_lsvi_luyo <- function() {
# Ensure the Python environment is set up
setup_python_environment()
# Define the Python file path
python_file <- here::here("inst/python/DP_LSVI_Luyo.py")
# Check if the file exists
if (!file.exists(python_file)) {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
# Source the Python file
reticulate::source_python(python_file)
}
# R wrapper for the DP_LSVI_Luyo class
create_DP_LSVI_Luyo <- function() {
# Source the Python script
source_dp_lsvi_luyo()
# Create an instance of the Python class
dp_lsvi <- DP_LSVI_Luyo$new()
# Define R wrapper functions
wrapper <- list(
get_model_name = function() dp_lsvi$get_model_name(),
get_H = function() dp_lsvi$get_H(),
run = function() dp_lsvi$run(),
compute_rewards = function() dp_lsvi$compute_rewards()
)
# Return the wrapper
return(wrapper)
}
# Main script for testing
tryCatch({
# Initialize the Python environment and class
dp_lsvi <- create_DP_LSVI_Luyo()
# Get the model name
model_name <- dp_lsvi$get_model_name()
print(model_name)
# Run the algorithm
dp_lsvi$run()
# Compute rewards
rewards <- dp_lsvi$compute_rewards()
print(rewards)
}, error = function(e) {
message("Error encountered: ", e$message)
})
dp_lsvi <- create_DP_LSVI_Luyo()
library(reticulate)
library(here)
setup_python_environment <- function(envname = "r-reticulate") {
if (!reticulate::virtualenv_exists(envname)) {
message("Creating virtual environment: ", envname)
reticulate::virtualenv_create(envname)
}
reticulate::virtualenv_install(envname, packages = c("numpy", "math"), ignore_installed = TRUE)
reticulate::use_virtualenv(envname, required = TRUE)
}
source_dp_lsvi_luyo <- function() {
setup_python_environment()
python_file <- here::here("inst/python/DP_LSVI_Luyo.py")
if (!file.exists(python_file)) {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
reticulate::source_python(python_file)
if (!exists("DP_LSVI_Luyo", envir = .GlobalEnv)) {
stop("DP_LSVI_Luyo class not found after sourcing the Python file.")
}
}
library(reticulate)
library(here)
setup_python_environment <- function(envname = "r-reticulate") {
if (!reticulate::virtualenv_exists(envname)) {
message("Creating virtual environment: ", envname)
reticulate::virtualenv_create(envname)
}
reticulate::virtualenv_install(envname, packages = c("numpy", "math"), ignore_installed = TRUE)
reticulate::use_virtualenv(envname, required = TRUE)
}
source_dp_lsvi_luyo <- function() {
setup_python_environment()
python_file <- here::here("inst/python/DP_LSVI_Luyo.py")
if (!file.exists(python_file)) {
stop("Python file 'DP_LSVI_Luyo.py' not found in 'inst/python/'. Please check the file path.")
}
reticulate::source_python(python_file)
if (!exists("DP_LSVI_Luyo", envir = .GlobalEnv)) {
stop("DP_LSVI_Luyo class not found after sourcing the Python file.")
}
}
create_DP_LSVI_Luyo <- function() {
source_dp_lsvi_luyo()
dp_lsvi <- DP_LSVI_Luyo$new()
wrapper <- list(
get_model_name = function() dp_lsvi$get_model_name(),
get_H = function() dp_lsvi$get_H(),
run = function() dp_lsvi$run(),
compute_rewards = function() dp_lsvi$compute_rewards()
)
return(wrapper)
}
tryCatch({
dp_lsvi <- create_DP_LSVI_Luyo()
model_name <- dp_lsvi$get_model_name()
print(model_name)
dp_lsvi$run()
rewards <- dp_lsvi$compute_rewards()
print(rewards)
}, error = function(e) {
message("Error encountered: ", e$message)
})
